{"remainingRequest":"/Users/yschoi/Desktop/workspace/yschoi/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yschoi/Desktop/workspace/yschoi/frontend/src/views/dashboard/pages/Detail.vue?vue&type=style&index=0&id=75ea47d1&scoped=true&lang=css&","dependencies":[{"path":"/Users/yschoi/Desktop/workspace/yschoi/frontend/src/views/dashboard/pages/Detail.vue","mtime":1610352077436},{"path":"/Users/yschoi/Desktop/workspace/yschoi/frontend/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yschoi/Desktop/workspace/yschoi/frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/yschoi/Desktop/workspace/yschoi/frontend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/yschoi/Desktop/workspace/yschoi/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yschoi/Desktop/workspace/yschoi/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5jb2x1bW4gewogIGRpc3BsYXk6IGZsZXg7CiAgZmxleC1mbG93OiBjb2x1bW4gbm93cmFwOwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7Cn0K"},{"version":3,"sources":["Detail.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiSA;AACA;AACA;AACA;AACA;AACA","file":"Detail.vue","sourceRoot":"src/views/dashboard/pages","sourcesContent":["<template>\n  <v-container>\n      <v-row justify=\"center\">\n      <v-col\n        cols=\"11\"\n      >\n        <v-card>\n          <v-toolbar flat>\n<!--            <template v-slot:extension>-->\n              <v-tabs\n                  v-model=\"currentItem\"\n                  fixed-tabs\n                  slider-color=\"black\"\n              >\n                <v-tab\n                    v-for=\"item in items\"\n                    :key=\"item\"\n                    :href=\"'#tab-' + item\"\n                >\n                  {{ item }}\n                </v-tab>\n\n              </v-tabs>\n<!--            </template>-->\n          </v-toolbar>\n\n          <v-tabs-items v-model=\"currentItem\">\n            <v-tab-item\n                v-for=\"item in items\"\n                :key=\"item\"\n                :value=\"'tab-' + item\"\n            >\n              <v-card flat v-if=\"item=='대시보드'\">\n                <v-card-text>\n                  <v-card\n                      class=\"mx-3\"\n                      outlined\n                  >\n                    <v-toolbar\n                    >\n                      <span class=\"subheading\" style=\"width: 30%; text-align: center;\">공급자:{{$store.state.clusterDetailInfo.provider}}</span>\n                      <v-divider\n                          class=\"mx-4\"\n                          vertical\n                      ></v-divider><span class=\"subheading\" style=\"width: 30%; text-align: center;\">쿠버네티스 버전:{{$store.state.clusterDetailInfo.version.gitVersion}}</span>\n                      <v-divider\n                          class=\"mx-4\"\n                          vertical\n                      ></v-divider><span class=\"subheading\" style=\"width: 30%; text-align: center;\">생성일:{{$store.state.clusterDetailInfo.created}}</span>\n                    </v-toolbar>\n\n                  </v-card>\n\n                  <v-card\n                      class=\"mx-3\"\n                      outlined\n                  >\n                    <div style=\"display: flex; width: 100%; height: 200px;\">\n                      <div style=\"width: 33.33%;\">\n                        <div class=\"column\">\n                          <donut :percent=\"clusterDetailInfo.cpuPercent\"\n                                 :visibleValue=\"true\"/>\n                        </div>\n                      </div>\n                      <div style=\"width: 33.33%;\">\n                        <div class=\"column\">\n                          <donut :percent=\"clusterDetailInfo.memPercent\"\n                                 :visibleValue=\"true\"/>\n                        </div>\n                      </div>\n                      <div style=\"width: 33.33%;\">\n                        <div class=\"column\">\n                          <donut :percent=\"clusterDetailInfo.podsPercent\"\n                                 :visibleValue=\"true\"/>\n                        </div>\n                      </div>\n                    </div>\n                    <v-toolbar\n                    >\n                      <span class=\"subheading\" style=\"width: 33.33%; text-align: center;\">cpu:{{$store.state.clusterDetailInfo.requested.cpu}}/{{$store.state.clusterDetailInfo.capacity.cpu}}</span>\n                      <v-divider\n                          class=\"mx-4\"\n                          vertical\n                      ></v-divider><span class=\"subheading\" style=\"width: 33.33%; text-align: center;\">memory:{{$store.state.clusterDetailInfo.requested.memory}}/{{$store.state.clusterDetailInfo.capacity.memory}}</span>\n                      <v-divider\n                          class=\"mx-4\"\n                          vertical\n                      ></v-divider><span class=\"subheading\" style=\"width: 33.33%; text-align: center;\">pods:{{$store.state.clusterDetailInfo.requested.pods}}/{{$store.state.clusterDetailInfo.capacity.pods}}</span>\n                    </v-toolbar>\n\n                  </v-card>\n                </v-card-text>\n              </v-card>\n\n              <v-card flat v-if=\"item=='노드'\">\n                <v-card-text>\n                  <node></node>\n<!--                  <v-data-table-->\n<!--                      :headers=\"headers\"-->\n<!--                      :items=\"information\"-->\n<!--                      :items-per-page=\"10\"-->\n<!--                      class=\"elevation-1\"-->\n<!--                  >-->\n\n<!--                  </v-data-table>-->\n                </v-card-text>\n              </v-card>\n\n              <v-card flat v-if=\"item=='프로젝트/네임스페이스'\">\n                <v-card-text>\n                  <projects></projects>\n                </v-card-text>\n              </v-card>\n\n\n            </v-tab-item>\n          </v-tabs-items>\n        </v-card>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n\n<script>\nconst axios = require('axios');\nconst Vue = require('vue');\nimport drawer from \"../components/core/Drawer\";\nimport projects from \"./Project\";\nimport node from \"./Node\";\n// import donut from 'vue-doughnut-chart'\n// import donut from '../component/DonutChart'\nimport donut from '../component/DoughnutChart'\n\nexport default {\n  name: \"Detail\",\n  components:{\n    projects,\n    node,\n    donut,\n  },\n  data: () => ({\n    headers: [\n      { text: '상태', value: 'state'},\n      { text: '노드 이름', value: 'appliedSpec.rancherKubernetesEngineConfig.nodes[0].hostnameOverride' },\n      { text: '역할', value: 'appliedSpec.rancherKubernetesEngineConfig.nodes[0].role' },\n      { text: '버전', value: 'version.gitVersion' },\n      { text: 'CPU', value: 'cpu'},\n      { text: '메모리', value: 'memory'},\n      { text: '파드', value: 'pods' },\n      { text: '수정/삭제', value: 'actions', sortable: false}\n    ],\n    tasksDone: 125,\n    currentItem: 'tab-Web',\n    items: [\n      '대시보드', '노드', '프로젝트/네임스페이스',\n    ],\n    text: 'Test Text',\n    information: [\n    ],\n    provider: '',\n    KubeVersion: '',\n    Created: '',\n    requested:{\n      cpu: '',\n      memory: '',\n      pods: '',\n    },\n    capacity:{\n      cpu: '',\n      memory: '',\n      pods: '',\n    },\n    id: '',\n    clusterDetailInfo: {\n      provider:'',\n      created:'',\n      version:{\n        gitVersion: '',\n      },\n      name: 'Cluster Name',\n      nodeCount: '',\n      requested:{\n        cpu: '',\n        memory: '',\n        pods: '',\n      },\n      capacity:{\n        cpu: '',\n        memory: '',\n        pods: '',\n      },\n      id: '',\n      cpu: '',\n      memory: '',\n      pods: '',\n      appliedSpec: {\n        rancherKubernetesEngineConfig:{\n          nodes: {},\n        },\n      },\n      cpuPercent: '',\n      memPercent: '',\n      podsPercent: '',\n    },\n    nodes: [\n    ],\n  }),\n\n  created(){\n    let _self = this\n\n    this.clusterDetailInfo = this.$store.state.clusterDetailInfo\n    this.information.push(this.clusterDetailInfo)\n    console.log(this.information)\n    console.log(this.clusterDetailInfo)\n\n\n    ///////////////// cpu\n    let reqCPU = this.clusterDetailInfo.requested.cpu\n    let capCPU = this.clusterDetailInfo.capacity.cpu\n\n    if(reqCPU == undefined || reqCPU == '' || reqCPU == '0'){\n      return\n    }\n\n    if(reqCPU.indexOf('m') != -1){\n      reqCPU = reqCPU.substring(0,reqCPU.indexOf('m'))\n      // console.log(reqCPU)\n    }else{\n      reqCPU = reqCPU*1000\n      // console.log(reqCPU)\n    }\n\n    if(capCPU.indexOf('m') != -1){\n      capCPU = capCPU.substring(0,capCPU.indexOf('m'))\n      // console.log(capCPU)\n    }else{\n      capCPU = capCPU*1000\n    }\n\n    let cpuPercent = reqCPU/capCPU*100\n    cpuPercent = cpuPercent.toFixed(1)\n    console.log(cpuPercent)\n\n    //////////////// memory\n    let reqMemory = this.clusterDetailInfo.requested.memory\n    let capMemory = this.clusterDetailInfo.capacity.memory\n\n    if(reqMemory.indexOf('Ki') != -1){\n      reqMemory = reqMemory.substring(0,reqMemory.indexOf('Ki'))\n      // console.log(reqCPU)\n    }else{\n      reqMemory = reqMemory.substring(0,reqMemory.indexOf('Mi'))*1024\n      // console.log(reqCPU)\n    }\n\n    if(capMemory.indexOf('Ki') != -1){\n      capMemory = capMemory.substring(0,capMemory.indexOf('Ki'))\n      // console.log(capCPU)\n    }else{\n      capMemory = reqMemory.substring(0,capMemory.indexOf('Mi'))*1024\n    }\n\n    let memPercent = reqMemory/capMemory*100\n    memPercent = memPercent.toFixed(1)\n    console.log(memPercent)\n\n    /////////////// pods\n    let reqPods = this.clusterDetailInfo.requested.pods\n    let capPods = this.clusterDetailInfo.capacity.pods\n\n    let podsPercent = reqPods/capPods*100\n    podsPercent = podsPercent.toFixed(1)\n    console.log(podsPercent)\n\n    this.clusterDetailInfo.cpuPercent = cpuPercent\n    this.clusterDetailInfo.memPercent = memPercent\n    this.clusterDetailInfo.podsPercent = podsPercent\n    this.$store.commit('SET_LOADING', false)\n\n  },\n\n  methods: {\n\n  },\n\n}\n</script>\n<style scoped>\n.column {\n  display: flex;\n  flex-flow: column nowrap;\n  align-items: center;\n  justify-content: center;\n}\n</style>"]}]}